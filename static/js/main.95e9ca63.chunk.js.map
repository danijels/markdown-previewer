{"version":3,"sources":["components/bar.js","components/editor.js","components/preview.js","App.js","reportWebVitals.js","index.js"],"names":["Bar","props","className","title","onClick","handleClick","icon","button","Editor","id","class","style","displayStyle","value","onChange","handleChange","rows","Preview","dangerouslySetInnerHTML","html","marked","gfm","breaks","App","state","input","placeholder","editorMaximized","previewerMaximized","bind","handleEditorClick","handlePreviewClick","event","this","setState","target","classes","faCompress","editor","preview","faArrowsAlt","__html","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAaeA,EAXH,SAACC,GAAD,OACR,sBAAKC,UAAU,MAAf,UACI,+BACKD,EAAME,QAEX,wBAAQC,QAASH,EAAMI,YAAvB,SACI,cAAC,IAAD,CAAiBC,KAAML,EAAMM,eCc1BC,EApBA,SAACP,GAAD,OACX,sBACEQ,GAAG,gBACHP,UAAWD,EAAMS,MACjBC,MAAOV,EAAMW,aAHf,UAKC,cAAC,EAAD,CACEL,OAAQN,EAAMM,OACdF,YAAaJ,EAAMI,YACnBF,MAAM,WAEN,0BACEM,GAAG,SACFI,MAAOZ,EAAMY,MACbC,SAAUb,EAAMc,aAChBC,KAAK,WCGAC,EAlBC,SAAChB,GAAD,OACZ,sBACEQ,GAAG,iBACHP,UAAWD,EAAMS,MACjBC,MAAOV,EAAMW,aAHf,UAKG,cAAC,EAAD,CACEL,OAAQN,EAAMM,OACdF,YAAaJ,EAAMI,YACnBF,MAAM,cAER,mBACEM,GAAG,UACHS,wBAAyBjB,EAAMkB,WCPxCC,aAAkB,CAChBC,KAAK,EACLC,QAAQ,I,IAsDKC,E,kDAlDX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDuB,MAAQ,CACTC,MAAOC,EACPC,iBAAiB,EACjBC,oBAAoB,GAExB,EAAKb,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBATX,E,gDAWnB,SAAaG,GACTC,KAAKC,SAAS,CACVT,MAAOO,EAAMG,OAAOtB,U,+BAG5B,WACIoB,KAAKC,SAAS,CACVP,iBAAkBM,KAAKT,MAAMG,oB,gCAGrC,WACIM,KAAKC,SAAS,CACVN,oBAAqBK,KAAKT,MAAMI,uB,oBAGxC,WACI,IAAMQ,EAAUH,KAAKT,MAAMG,gBACrB,CAAEpB,OAAQ8B,IAAYC,OAAQ,qBAAsBC,QAAS,UAC7DN,KAAKT,MAAMI,mBACX,CAAErB,OAAQ8B,IAAYC,OAAQ,SAAUC,QAAS,kBACjD,CAAEhC,OAAQiC,IAAaF,OAAQ,GAAIC,QAAS,kBAClD,OACI,gCACI,cAAC,EAAD,CAAQ1B,MAAOoB,KAAKT,MAAMC,MACxBV,aAAckB,KAAKlB,aACnBR,OAAQ6B,EAAQ7B,OAChBF,YAAa4B,KAAKH,kBAClBpB,MAAO0B,EAAQE,SAEjB,cAAC,EAAD,CAASnB,KAAM,CAACsB,OAAQrB,EAAOa,KAAKT,MAAMC,QACxClB,OAAQ6B,EAAQ7B,OAChBF,YAAa4B,KAAKF,mBAClBrB,MAAO0B,EAAQG,iB,GA5CfG,aAsDZhB,EAAW,0nCCvDFiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.95e9ca63.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Bar = (props) => (\r\n    <div className='bar'>\r\n        <span>\r\n            {props.title}\r\n        </span>\r\n        <button onClick={props.handleClick}>\r\n            <FontAwesomeIcon icon={props.button} />\r\n        </button>\r\n    </div>\r\n)\r\n\r\nexport default Bar","import Bar from './bar'\r\n\r\nconst Editor = (props) => (\r\n    <div \r\n      id=\"editor-window\" \r\n      className={props.class} \r\n      style={props.displayStyle}\r\n    >\r\n    \t<Bar \r\n    \t  button={props.button} \r\n    \t  handleClick={props.handleClick} \r\n    \t  title=\"Editor\"\r\n    \t/>\r\n      \t<textarea \r\n      \t  id=\"editor\"\r\n          value={props.value}\r\n          onChange={props.handleChange} \r\n          rows=\"15\"\r\n        />\r\n    </div>      \r\n)\r\n\r\nexport default Editor\r\n\r\n\r\n","import Bar from './bar'\r\n\r\nconst Preview = (props) => (\r\n    <div \r\n      id=\"preview-window\" \r\n      className={props.class} \r\n      style={props.displayStyle}\r\n    >\r\n      \t<Bar \r\n      \t  button={props.button} \r\n      \t  handleClick={props.handleClick} \r\n      \t  title=\"Previewer\"\r\n      \t/>\r\n      \t<p \r\n      \t  id=\"preview\" \r\n      \t  dangerouslySetInnerHTML={props.html} \r\n      \t/>\r\n    </div>\r\n)\r\n\r\nexport default Preview\r\n","import * as React from 'react'\nimport { faCompress, faArrowsAlt } from '@fortawesome/free-solid-svg-icons'\nimport * as marked from 'marked'\nimport './App.scss'\n\nimport Editor from './components/editor'\nimport Preview from './components/preview'\n\nmarked.setOptions({\n  gfm: true,\n  breaks: true\n});\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: placeholder,\n            editorMaximized: false,\n            previewerMaximized: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEditorClick = this.handleEditorClick.bind(this);\n        this.handlePreviewClick = this.handlePreviewClick.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            input: event.target.value \n        })\n    }\n    handleEditorClick() {\n        this.setState({\n            editorMaximized: !this.state.editorMaximized\n        });\n    }\n    handlePreviewClick() {\n        this.setState({\n            previewerMaximized: !this.state.previewerMaximized\n        });\n    }\n    render() {\n        const classes = this.state.editorMaximized\n            ? { button: faCompress, editor: \"editor-window-maxi\", preview: \"hidden\" } \n            : this.state.previewerMaximized\n            ? { button: faCompress, editor: \"hidden\", preview: \"preview-window\" }\n            : { button: faArrowsAlt, editor: \"\", preview: \"preview-window\" };\n        return (\n            <div>\n                <Editor value={this.state.input} \n                  handleChange={this.handleChange}\n                  button={classes.button}\n                  handleClick={this.handleEditorClick}\n                  class={classes.editor}\n                />\n                <Preview html={{__html: marked(this.state.input)}}\n                  button={classes.button}\n                  handleClick={this.handlePreviewClick}\n                  class={classes.preview}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n    \n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://www.placeimg.com/300/200/nature)\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}